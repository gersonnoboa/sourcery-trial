import UIKit

{% for type in types.implementing.DebuggableV3 %}
// MARK: {{ type.name }} Debuggable
extension {{ type.name }} {
    {% if argument.debuggable %}
    // sourcery:inline:auto:{{ type.name }}.DebugLabels
    var remoteAudioLabel = UILabel()
    var remoteVideoLabel = UILabel()
    var localAudioLabel = UILabel()
    var localVideoLabel = UILabel()
    
    func addLabelsToStackView() {
        stackView.addArrangedSubview(remoteVideoLabel)
        stackView.addArrangedSubview(remoteAudioLabel)
        stackView.addArrangedSubview(localVideoLabel)
        stackView.addArrangedSubview(localAudioLabel)
    }
    // sourcery:end
    // sourcery:inline:{{ type.name }}.AddDebugLabels
    addLabelsToStackView()
    // sourcery:end

    func remoteAudioActivated(_ isActivated: Bool) {
        remoteAudioLabel.text = "Remote audio: \(activationLabel(from: isActivated))"
    }

    func remoteVideoActivated(_ isActivated: Bool) {
        remoteVideoLabel.text = "Remote video: \(activationLabel(from: isActivated))"
    }

    func localAudioActivated(_ isActivated: Bool) {
        localAudioLabel.text = "Local audio: \(activationLabel(from: isActivated))"
    }

    func localVideoActivated(_ isActivated: Bool) {
        localVideoLabel.text = "Local video: \(activationLabel(from: isActivated))"
    }

    private func activationLabel(from isActivated: Bool) -> String {
        isActivated ? "active" : "inactive"
    }
    {% else %}
    // sourcery:inline:auto:{{ type.name }}.DebugLabels

    // sourcery:end
    // sourcery:inline:{{ type.name }}.AddDebugLabels

    // sourcery:end
    {% endif %}
}
{% endfor %}
